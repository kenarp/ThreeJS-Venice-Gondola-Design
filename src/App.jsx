import { useEffect, useState } from "react";
import { WindowContextProvider } from "./context/WindowContext";
import ThreeRendering from "./three/ThreeRendering";
import KeyshotXRcomp from "./keyshotXR/KeyshotXRcomp";
import styles from "./App.module.css";
import GithubLink from "./githubLink/GithubLink";
import ProjectIntro from "./projectIntro/ProjectIntro";

function App() {
  const [supportWebGL, setSupportWebGL] = useState(true);
  const [renderMode, setRenderMode] = useState("");

  function detectWebGLContext() {
    // Create canvas element. The canvas is not added to the document itself, so it is never displayed in the browser window.
    const canvas = document.createElement("canvas");

    // Get WebGLRenderingContext from canvas element.
    const gl =
      canvas.getContext("webgl") || canvas.getContext("experimental-webgl");

    // Report the result.
    setRenderMode(
      gl instanceof WebGLRenderingContext ? "threeJS" : "keyshotXR"
    );
    setSupportWebGL(gl instanceof WebGLRenderingContext);
  }

  useEffect(detectWebGLContext, []);

  return (
    <div className={styles.gridContainer}>
      <div className={styles.toggleContainer}>
        <input
          id={styles.threejs}
          name="render-mode"
          type="radio"
          disabled={!supportWebGL}
          checked={renderMode === "threeJS"}
          onChange={() => setRenderMode("threeJS")}
        />
        <label className={styles.rendererLabel} htmlFor={styles.threejs}>
          <img src="/threeJS.svg" alt="threeJS logo" />
          ThreeJS
          <span className={styles.tooltip}>
            {supportWebGL
              ? "JavaScript 3D Library using WebGL"
              : "WebGL is NOT supported by your browser"}
          </span>
        </label>

        <input
          id={styles.keyshot}
          name="render-mode"
          type="radio"
          checked={renderMode === "keyshotXR"}
          onChange={() => setRenderMode("keyshotXR")}
        />
        <label className={styles.rendererLabel} htmlFor={styles.keyshot}>
          <img src="/KeyShot_Icon_RGB.svg" alt="threeJS logo" />
          Keyshot XR
          <span className={styles.tooltip}>
            Fallback solution when WebGL is not supported
          </span>
        </label>

        <div className={styles.toggle} />
      </div>
      <div className={styles.projectIntroContainer}>
        <ProjectIntro>
          This project is built with React, it detects if a user's browser
          supports WebGL. If WebGL is supported, the content created in ThreeJS
          will be Real-Time rendered to interactively demonstrate my design. On
          the other hand, if WebGL is disabled, this app will use KeyShotXR
          pre-rendered content to show the design.
          <br />
          <br />
          The Venice Gondola model is built in SolidWorks, optimized in MoI3D
          and Blender, while the environment of the Venice canal in ThreeJS is
          generated by the Blocakde Labs Skybox AI.
          <br />
          <br />
          Desgin background:
          <br />
          <br />
          When I visisted Venice, the elegant shape of Gondola on the canal,
          together with the structure of roof beams in traditional Italian
          buildings, left a strong impression of this famous city and its
          culture.
          <br />
          With the help of 3D CAD modeling, I could combine these two elements
          harmoniously presented in one piece. Then when I moved into the
          computer programming world, I decided to digitally present this
          project using Javascript based tools like Threejs and KeyshotXR.
        </ProjectIntro>
      </div>

      <div className={styles.githubLinkContainer}>
        <GithubLink url="https://github.com/kenarp/ThreeJS-Venice-Gondola-Design" />
      </div>

      <WindowContextProvider>
        {renderMode === "threeJS" ? <ThreeRendering /> : <KeyshotXRcomp />}
      </WindowContextProvider>
    </div>
  );
}

export default App;
